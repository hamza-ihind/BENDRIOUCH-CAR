datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  seed    = "../scripts/seed.ts"
}


enum UserRole {
  ADMIN
  USER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                    String        @id @default(cuid())
  firstName             String?
  lastName              String?
  password              String?
  phone                 String?
  image                 String?
  permis                String?
  passport              String?
  city                  String?
  country               String?
  birthday              DateTime?
  email                 String?       @unique
  emailVerified         DateTime?
  isOnboarded           Boolean       @default(false)
  role                  UserRole      @default(USER)
  accounts              Account[]
  reservations          Reservation[]
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id            String        @id @default(cuid())
  email         String
  token         String        @unique
  expires       DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id            String        @id @default(cuid())
  email         String
  token         String        @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id            String        @id @default(cuid())
  email         String
  token         String        @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// USER

// ENUM 

// VOITURE

model Car {
  id                String      @id @default(cuid()) 
  name              String?  
  model             String? 
  pricePerDay       Float?  
  imageUrl          String?  
  description       String?  
  availability      Boolean     @default(true) 
  fuelType          String?   
  seats             Float?      
  transmission      String?   
  isPublished       Boolean     @default(false)
  createdAt         DateTime    @default(now())
  reservations      Reservation[]
  updatedAt         DateTime    @updatedAt
}

model Reservation {
  id              String   @id @default(cuid())
  flightNumber    String?
  startDate       DateTime
  endDate         DateTime
  status          ReservationStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  carId           String?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation with User
  car             Car?     @relation(fields: [carId], references: [id]) // Relation with Car (optional)

  @@map("reservations")
}


enum ReservationStatus {
  PENDING
  CANCELLED
  CONFIRMED
}
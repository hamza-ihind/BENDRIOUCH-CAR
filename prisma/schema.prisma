datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  seed    = "../scripts/seed.ts"
}

// USER

enum CategoryType {
  COURSE
  BLOG
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                    String        @id @default(cuid())
  username              String?
  bio                   String?
  phone                 String?
  firstName             String?
  lastName              String?
  email                 String?       @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole      @default(USER)
  isOnboarded           Boolean       @default(false)
  accounts              Account[]
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id            String        @id @default(cuid())
  email         String
  token         String        @unique
  expires       DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id            String        @id @default(cuid())
  email         String
  token         String        @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id            String        @id @default(cuid())
  email         String
  token         String        @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// COURSE





// BLOG

// USER

// ENUM 

// VOITURE

// RESERVATION

// ACCOUNT
// TOKEN - VERIFICATION - NEWPASSWORD - FORGETPASSWORD